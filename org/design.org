# Local Variables:
# fill-column: 80
# End:
#+TITLE: Design

* Info
This document is meant to describe the design of the Smallisp Language and an
implementation of the language. To keep the document short, the document uses
terminology common to lisps, and makes no effort to explain that.

* Overview
Smallisp is a programming language designed mainly for learning purposes. It is
meant to be a lisp, and provide a minimal set of features. However, it is also
meant to have a complete and rich runtime.

* Language Design
** Syntax
   Lisp based syntax. Everything is an expression.
   - S-Expression: ( /expr/* )
     The first expression in an expression either evaluates to a function, a
     macro or a special-form.
   - Quoted List: '( /expr/* )
     Quoted lists create a list without evaluating the contents

** Evaluation
   Evaluation rule follow most lisps.
   
** Special Forms
   - def: Bind a symbol to a value
   - lambda: Create a function. => (fn (a b) /body/)
   - if: If conditional expression. => (if /pred/ /then/ /else/)
   - set!: Changes the binding of a defined symbol
** Primitive Types
   - Int: fix-width signed 64-bit integer.
   - Symbol: lisp symbol.
     Holds an object or nil.
   - List: standard lisp list. Supports fast cons and an immutable interface.
   - Function: standard function that knows how many args it should take and a
     reference to it's definition.
   - Macro: same as a function but transformed during 'macro expansion'. A
     special form is a kind of macro.
     
** Binding Rules
   *def* creates a definition and binds it to a value in the /current scope/.
   Multiple definitions cannot exists in the same scope, but they cannot exists
   in nested scopes (eg. one can create a definition in a funciton that shadows
   an outer scopes definition in a function).
   *set!* changes the binding of a variable found in the smallest scope that
   encloses to a new value.
   
** Builtin Operations
Regardless of implementation choice, the following list specifies all primitive
builtin operations that have to be implemented.
*** Int
- add: Addition without auto promotion or overflow check
- sub: Subtraction without auto promotion or overflow check
- mul: Multiplication without auto promotion or overflow check
- div: Integer division
*** Cons and List
- cons: Construct a cons cell, a pair or a list

** Type System
   I would like to stick a fairly primitive type system, that does not provide
   static analysis or verification of programs, but rather runtime checks that
   prevent undefined behavior.
   
   The sl::Type object has to introduced to bring together the type system and
   the runtime. 
   
   A type object has the following properties:
   - It is a singleton object.
   - It has a hashcode that is equal to its address.
     
*** Ideas
**** Type Hierarchy
     Type objects have parent pointers
**** Dynamic Dispatch (Interface Types)
     Using interfaces for dynamic dispatch
**** Multi-methods
     Multiple dispatch
**** ADTs (Algebraic Data Types)
     This would suggest the use of pattern matching
* Implementation Design
** Components
   Smallisp 
** Data Types
**** Object
All Smallisp Datatypes implement the an sl::Object ABC.

#+BEGIN_SRC C++
namespace sl {

class Object {
  virtual Type GetType() = 0;
  virtual ~Object() = 0;
  virtual bool IsEqual(const Object *) const;
  virtual bool IsEqual(const Object &) const;
}

}
#+END_SRC

We do not want to have another layer of indirection for ints, to keep the
language fast and simple. 

**** Int and Symbol
So the definitions of sl::Int, sl::Symbol, and sl::List is as follows.
#+BEGIN_SRC C++
namespace sl {

class Int : Object {
public:
  long Value
  Int(const long &X);
  static const Int Zero = Int(0);
  static const Int One = Int(1);
}

class Symbol : Object {
public:
  std::string Name;
  Object *Object;
  // Use this for constructing symbols.
  static Symbol get(const std::string &Name) {};
}

#+END_SRC
**** Cons and List
#+BEGIN_SRC C++
struct Cons {
  Object *Object;
  Cons *Next;
}

class List : Object {
public:
  Cons *Head;
}

}
#+END_SRC

We would like our runtime to interact with primitive in "primitive
form". Meaning that we have minimal wrapping.

**** Callable
Callable is an interface that implements the call operator:
const Object *operator()(const Object *args);
**** Function
Functions in user space represent an object that can be /called/ with a given
number of arguments. (They implement the /Callable/ interface)
Functions in interpreter space encompasses a definition and each instance of
that definition is a /stack frame/.
The /calling semantics/ of a function object is defined by the interpreter,
which makes the Function type very unique from the other primitives.

#+BEGIN_SRC C++
  class Function : public Object {
   public:
    Function(Interp *interp, const List *params, const Object *body)
        : params_(params), body_(body), interp_(interp){};

    const List *params(void) const { return params_; };
    const Object *body(void) const { return body_; };
    Type GetType(void) const override { return Type::kFunction; };
    // Function equality is address equality, it should rarely if not ever be used
    bool IsEqual(const Object *o) const override { return this == o; };
    // Use default hashcode

   private:
    const List *params_;
    const Object *body_;
    Interp *interp_;
  };
#+END_SRC
The interpreter passed in is the interpreter used for evaluation.  This would
allow us to create a closure of the current environment. The function will be
available to lookup variables either through the frame and static links, or
directly at the global environment.

**** Builtin Functions
+Builtin functions are tied to the implementation of the interpreter.+

+For treewalking interpreters, the builtin function is executing code that+
+is written in the implementation language.+

+For bytecode interpreters, builtin functions are just a set of bytecodes the+
+implement the function. For example to implement integer addition, the bytecode+
+interpreter might have a int_add instruction.+

+For JIT compilers, the builtin functions can just be native code that we link
to.+

Builtin functions can be composed of Smallisp expressions, or C functions.
To use existing C functions, we wrap them with a class that implements the
callable interface. To 

** Reader
Instead of having a lexer and parser. I would like to implement a
LispReader. The reader would parse the input and produce Sl_List objects,
keeping the language 'list' and the implementation 'list' consistent would keep
the language smaller and also provide efficient implementations. The minor
setback would be that we have to keep the list object as simple as possible to
minimize the overhead of list objects.
** Interpreter
**** AST Interpreter
     To provide a starter and baseline for the runtime, I would like to
     implement an AST walking interpeter. This would mean a slow but nonetheless
     working interpreter.
**** LLVM JIT Compiler
      Fitting  on a the LLVM JIT compiler would allow us to benchmark our
      bytecode interpreter implementation and JIT implementation. It would also
      serve as another execution engine.
**** Bytecode compiler and Bytecode Intpreter
     Next would be to implement a bytecode representation and a bytecode
     compiler and interpreter.
**** JIT Compiler
     Finally is a JIT compiler from bytecode to machine code.
** Builtin Operations
+Builtin operations are currently segregated and interpreter dependent. One way+
+to decouple and allow reuse is to have a native FFI(Foreign Function+
+Interface). This would allow us to have functions that link with native code+
+that can be shared amongst all intepreters. Builtin operations would live in the+
+global environment as symbol => native code. Evaluating native code would be a+
+shared feature that all intepreters can use.+

Builtin objects are objects that are implemented in C. Builtin functions are
basically functions implemented in C. However a common interface between
user-defined functions and builtin functions is essential to allowing
flexibility with the use of functions.

Currently builtin functions each define a class that extends ~class BuiltinFunction~
The manual writing of these classes can be extinguished with templates/macros.

Another way to define these builtin functions is have a BuiltinFunction class
which takes in a pointer to a C++ function and invokes the function in the
/call/ operator.

Both approaches introduce a level of indirection that *might* be have
significant performance cost.

Currently we will take the first approach and redesign this if required.

** Userspace vs Interpreter space
    Because this is a dynamic lisp, it is expected to have large amounts of
    overlap between userspace and interpreter space objects. However a few key
    things to note:
        - Do not leak nullptr/NULL into userspace
        - Clear distinction between interpreter coding errors and user errors
    For now, errors are a special kind of object that holds a error
    message. Functions that are exposed to userspace should signal errors with
    these error objects. This is a temporary solution before a design for
    userspace errors is concrete.
    All functions that will be called in userspace will have a return type of
    ~const Object *~ and parameter types of ~const Object *~, *NOT* specific types.
    Therefore, some level of type checking has to be done for builtin functions.
** Using references vs pointers
    _Prefer reference over pointers_
    Ideally we have functions that take and return references in all cases.
    But that has proven to be a nuisance, because there are times we want to
    return nullptrs. But using references reduces chances of nullptr
    dereferences and provides nice value syntax on top of pointer semantics.
    
    To migrate to completely using references, the key is to use Error objects
    (subclass of sl::Object).
